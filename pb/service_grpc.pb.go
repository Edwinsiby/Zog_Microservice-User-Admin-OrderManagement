// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: pb/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrderClient interface {
	MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error)
	PaymentVerification(ctx context.Context, in *PaymentVerificationRequest, opts ...grpc.CallOption) (*PaymentVerificationResponse, error)
	CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error)
	OrderHistory(ctx context.Context, in *OrderHistoryRequest, opts ...grpc.CallOption) (*OrderHistoryResponse, error)
	OrderReturn(ctx context.Context, in *OrderReturnRequest, opts ...grpc.CallOption) (*OrderReturnResponse, error)
	AdminOrderUpdate(ctx context.Context, in *AdminOrderUpdateRequest, opts ...grpc.CallOption) (*AdminOrderUpdateResponse, error)
	AdminReturnUpdate(ctx context.Context, in *AdminReturnUpdateRequest, opts ...grpc.CallOption) (*AdminReturnUpdateResponse, error)
	AdminRefund(ctx context.Context, in *AdminRefundRequest, opts ...grpc.CallOption) (*AdminRefundResponse, error)
	SalesReportByDate(ctx context.Context, in *SalesReportByDateRequest, opts ...grpc.CallOption) (*SalesReportByDateResponse, error)
	SalesReportByPeriod(ctx context.Context, in *SalesReportByPeriodRequest, opts ...grpc.CallOption) (*SalesReportByPeriodResponse, error)
	SalesReportByCategory(ctx context.Context, in *SalesReportByCategoryRequest, opts ...grpc.CallOption) (*SalesReportByCategoryResponse, error)
	SortOrderByStatus(ctx context.Context, in *SortOrderByStatusRequest, opts ...grpc.CallOption) (*SortOrderByStatusResponse, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) MyMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Order/MyMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) PlaceOrder(ctx context.Context, in *PlaceOrderRequest, opts ...grpc.CallOption) (*PlaceOrderResponse, error) {
	out := new(PlaceOrderResponse)
	err := c.cc.Invoke(ctx, "/pb.Order/PlaceOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) PaymentVerification(ctx context.Context, in *PaymentVerificationRequest, opts ...grpc.CallOption) (*PaymentVerificationResponse, error) {
	out := new(PaymentVerificationResponse)
	err := c.cc.Invoke(ctx, "/pb.Order/PaymentVerification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) CancelOrder(ctx context.Context, in *CancelOrderRequest, opts ...grpc.CallOption) (*CancelOrderResponse, error) {
	out := new(CancelOrderResponse)
	err := c.cc.Invoke(ctx, "/pb.Order/CancelOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) OrderHistory(ctx context.Context, in *OrderHistoryRequest, opts ...grpc.CallOption) (*OrderHistoryResponse, error) {
	out := new(OrderHistoryResponse)
	err := c.cc.Invoke(ctx, "/pb.Order/OrderHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) OrderReturn(ctx context.Context, in *OrderReturnRequest, opts ...grpc.CallOption) (*OrderReturnResponse, error) {
	out := new(OrderReturnResponse)
	err := c.cc.Invoke(ctx, "/pb.Order/OrderReturn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) AdminOrderUpdate(ctx context.Context, in *AdminOrderUpdateRequest, opts ...grpc.CallOption) (*AdminOrderUpdateResponse, error) {
	out := new(AdminOrderUpdateResponse)
	err := c.cc.Invoke(ctx, "/pb.Order/AdminOrderUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) AdminReturnUpdate(ctx context.Context, in *AdminReturnUpdateRequest, opts ...grpc.CallOption) (*AdminReturnUpdateResponse, error) {
	out := new(AdminReturnUpdateResponse)
	err := c.cc.Invoke(ctx, "/pb.Order/AdminReturnUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) AdminRefund(ctx context.Context, in *AdminRefundRequest, opts ...grpc.CallOption) (*AdminRefundResponse, error) {
	out := new(AdminRefundResponse)
	err := c.cc.Invoke(ctx, "/pb.Order/AdminRefund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) SalesReportByDate(ctx context.Context, in *SalesReportByDateRequest, opts ...grpc.CallOption) (*SalesReportByDateResponse, error) {
	out := new(SalesReportByDateResponse)
	err := c.cc.Invoke(ctx, "/pb.Order/SalesReportByDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) SalesReportByPeriod(ctx context.Context, in *SalesReportByPeriodRequest, opts ...grpc.CallOption) (*SalesReportByPeriodResponse, error) {
	out := new(SalesReportByPeriodResponse)
	err := c.cc.Invoke(ctx, "/pb.Order/SalesReportByPeriod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) SalesReportByCategory(ctx context.Context, in *SalesReportByCategoryRequest, opts ...grpc.CallOption) (*SalesReportByCategoryResponse, error) {
	out := new(SalesReportByCategoryResponse)
	err := c.cc.Invoke(ctx, "/pb.Order/SalesReportByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) SortOrderByStatus(ctx context.Context, in *SortOrderByStatusRequest, opts ...grpc.CallOption) (*SortOrderByStatusResponse, error) {
	out := new(SortOrderByStatusResponse)
	err := c.cc.Invoke(ctx, "/pb.Order/SortOrderByStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
// All implementations must embed UnimplementedOrderServer
// for forward compatibility
type OrderServer interface {
	MyMethod(context.Context, *Request) (*Response, error)
	PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error)
	PaymentVerification(context.Context, *PaymentVerificationRequest) (*PaymentVerificationResponse, error)
	CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error)
	OrderHistory(context.Context, *OrderHistoryRequest) (*OrderHistoryResponse, error)
	OrderReturn(context.Context, *OrderReturnRequest) (*OrderReturnResponse, error)
	AdminOrderUpdate(context.Context, *AdminOrderUpdateRequest) (*AdminOrderUpdateResponse, error)
	AdminReturnUpdate(context.Context, *AdminReturnUpdateRequest) (*AdminReturnUpdateResponse, error)
	AdminRefund(context.Context, *AdminRefundRequest) (*AdminRefundResponse, error)
	SalesReportByDate(context.Context, *SalesReportByDateRequest) (*SalesReportByDateResponse, error)
	SalesReportByPeriod(context.Context, *SalesReportByPeriodRequest) (*SalesReportByPeriodResponse, error)
	SalesReportByCategory(context.Context, *SalesReportByCategoryRequest) (*SalesReportByCategoryResponse, error)
	SortOrderByStatus(context.Context, *SortOrderByStatusRequest) (*SortOrderByStatusResponse, error)
	mustEmbedUnimplementedOrderServer()
}

// UnimplementedOrderServer must be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (UnimplementedOrderServer) MyMethod(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyMethod not implemented")
}
func (UnimplementedOrderServer) PlaceOrder(context.Context, *PlaceOrderRequest) (*PlaceOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceOrder not implemented")
}
func (UnimplementedOrderServer) PaymentVerification(context.Context, *PaymentVerificationRequest) (*PaymentVerificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PaymentVerification not implemented")
}
func (UnimplementedOrderServer) CancelOrder(context.Context, *CancelOrderRequest) (*CancelOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelOrder not implemented")
}
func (UnimplementedOrderServer) OrderHistory(context.Context, *OrderHistoryRequest) (*OrderHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderHistory not implemented")
}
func (UnimplementedOrderServer) OrderReturn(context.Context, *OrderReturnRequest) (*OrderReturnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderReturn not implemented")
}
func (UnimplementedOrderServer) AdminOrderUpdate(context.Context, *AdminOrderUpdateRequest) (*AdminOrderUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminOrderUpdate not implemented")
}
func (UnimplementedOrderServer) AdminReturnUpdate(context.Context, *AdminReturnUpdateRequest) (*AdminReturnUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminReturnUpdate not implemented")
}
func (UnimplementedOrderServer) AdminRefund(context.Context, *AdminRefundRequest) (*AdminRefundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AdminRefund not implemented")
}
func (UnimplementedOrderServer) SalesReportByDate(context.Context, *SalesReportByDateRequest) (*SalesReportByDateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalesReportByDate not implemented")
}
func (UnimplementedOrderServer) SalesReportByPeriod(context.Context, *SalesReportByPeriodRequest) (*SalesReportByPeriodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalesReportByPeriod not implemented")
}
func (UnimplementedOrderServer) SalesReportByCategory(context.Context, *SalesReportByCategoryRequest) (*SalesReportByCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SalesReportByCategory not implemented")
}
func (UnimplementedOrderServer) SortOrderByStatus(context.Context, *SortOrderByStatusRequest) (*SortOrderByStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SortOrderByStatus not implemented")
}
func (UnimplementedOrderServer) mustEmbedUnimplementedOrderServer() {}

// UnsafeOrderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrderServer will
// result in compilation errors.
type UnsafeOrderServer interface {
	mustEmbedUnimplementedOrderServer()
}

func RegisterOrderServer(s grpc.ServiceRegistrar, srv OrderServer) {
	s.RegisterService(&Order_ServiceDesc, srv)
}

func _Order_MyMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).MyMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/MyMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).MyMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_PlaceOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).PlaceOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/PlaceOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).PlaceOrder(ctx, req.(*PlaceOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_PaymentVerification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaymentVerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).PaymentVerification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/PaymentVerification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).PaymentVerification(ctx, req.(*PaymentVerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_CancelOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).CancelOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/CancelOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).CancelOrder(ctx, req.(*CancelOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_OrderHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).OrderHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/OrderHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).OrderHistory(ctx, req.(*OrderHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_OrderReturn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderReturnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).OrderReturn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/OrderReturn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).OrderReturn(ctx, req.(*OrderReturnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_AdminOrderUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminOrderUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).AdminOrderUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/AdminOrderUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).AdminOrderUpdate(ctx, req.(*AdminOrderUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_AdminReturnUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminReturnUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).AdminReturnUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/AdminReturnUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).AdminReturnUpdate(ctx, req.(*AdminReturnUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_AdminRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminRefundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).AdminRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/AdminRefund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).AdminRefund(ctx, req.(*AdminRefundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_SalesReportByDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesReportByDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).SalesReportByDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/SalesReportByDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).SalesReportByDate(ctx, req.(*SalesReportByDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_SalesReportByPeriod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesReportByPeriodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).SalesReportByPeriod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/SalesReportByPeriod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).SalesReportByPeriod(ctx, req.(*SalesReportByPeriodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_SalesReportByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SalesReportByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).SalesReportByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/SalesReportByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).SalesReportByCategory(ctx, req.(*SalesReportByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_SortOrderByStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SortOrderByStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).SortOrderByStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Order/SortOrderByStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).SortOrderByStatus(ctx, req.(*SortOrderByStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Order_ServiceDesc is the grpc.ServiceDesc for Order service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Order_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MyMethod",
			Handler:    _Order_MyMethod_Handler,
		},
		{
			MethodName: "PlaceOrder",
			Handler:    _Order_PlaceOrder_Handler,
		},
		{
			MethodName: "PaymentVerification",
			Handler:    _Order_PaymentVerification_Handler,
		},
		{
			MethodName: "CancelOrder",
			Handler:    _Order_CancelOrder_Handler,
		},
		{
			MethodName: "OrderHistory",
			Handler:    _Order_OrderHistory_Handler,
		},
		{
			MethodName: "OrderReturn",
			Handler:    _Order_OrderReturn_Handler,
		},
		{
			MethodName: "AdminOrderUpdate",
			Handler:    _Order_AdminOrderUpdate_Handler,
		},
		{
			MethodName: "AdminReturnUpdate",
			Handler:    _Order_AdminReturnUpdate_Handler,
		},
		{
			MethodName: "AdminRefund",
			Handler:    _Order_AdminRefund_Handler,
		},
		{
			MethodName: "SalesReportByDate",
			Handler:    _Order_SalesReportByDate_Handler,
		},
		{
			MethodName: "SalesReportByPeriod",
			Handler:    _Order_SalesReportByPeriod_Handler,
		},
		{
			MethodName: "SalesReportByCategory",
			Handler:    _Order_SalesReportByCategory_Handler,
		},
		{
			MethodName: "SortOrderByStatus",
			Handler:    _Order_SortOrderByStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/service.proto",
}
